@page "/scheduler"
@using Syncfusion.Blazor.Notifications


<PageTitle>Scheduler</PageTitle>
<h3>Scheduler</h3>

@if (DataSource is null)
{
    <span>gg</span>
}
else
{
    <div class="col-lg-12 control-section toast-default-section">
        <SfToast ID="toast_default" @ref="ToastObj" Title="Adaptive Tiles Meeting" Content="@ToastContent" Timeout="5000" Icon="e-meeting">
            <ToastPosition X="@ToastPosition"></ToastPosition>
        </SfToast>
        <div class="col-lg-12 col-sm-12 col-md-12 center">
            <div id="toastBtnDefault" style="margin: auto;text-align: center">
                <button class="e-btn" @onclick="@ShowOnClick">Show Toasts</button>
                <button class="e-btn" @onclick="@HideOnClick">Hide All</button>
            </div>
        </div>
    </div>


    <SfSchedule TValue="@AppointmentData" Height="650px" @bind-SelectedDate="@CurrentDate" CurrentView="CurrentView">
        <ScheduleEventSettings DataSource="@DataSource"></ScheduleEventSettings>
        <ScheduleViews @onclick="HandleClick">
            <ScheduleView Option="View.Day"></ScheduleView>
            <ScheduleView Option="View.Week" StartHour="07:00" EndHour="11:00"></ScheduleView>
            <ScheduleView Option="View.Week"></ScheduleView>
            <ScheduleView Option="View.WorkWeek" StartHour="10:00" EndHour="18:00"></ScheduleView>
            <ScheduleView Option="View.Month" MaxEventsPerRow="2" ShowWeekend="false"></ScheduleView>
            <ScheduleView Option="View.Agenda"></ScheduleView>
        </ScheduleViews>
    </SfSchedule>
}


<style>
    #toast_default .e-meeting::before {
        content: "\e705";
        font-size: 17px;
    }

    .bootstrap4 #toast_default .e-meeting::before {
        content: "\e763";
        font-size: 20px;
    }
</style>

@code {
    protected override void OnInitialized()
    {
        var om = 1;
    }
    View CurrentView = View.Month;
    DateTime CurrentDate = new DateTime(2020, 2, 14);
    List<AppointmentData> DataSource = new List<AppointmentData>
    {
        new AppointmentData { Id = 1, Subject = "Paris", StartTime = new DateTime(2020, 2, 13, 10, 0, 0) , EndTime = new DateTime(2020, 2, 13, 12, 0, 0) },
        new AppointmentData { Id = 2, Subject = "Germany", StartTime = new DateTime(2020, 2, 15, 10, 0, 0) , EndTime = new DateTime(2020, 2, 15, 12, 0, 0) }
    };
    public class AppointmentData
    {
        public int Id { get; set; }
        public string Subject { get; set; }
        public string Location { get; set; }
        public DateTime StartTime { get; set; }
        public DateTime EndTime { get; set; }
        public string Description { get; set; }
        public bool IsAllDay { get; set; }
        public string RecurrenceRule { get; set; }
        public string RecurrenceException { get; set; }
        public Nullable<int> RecurrenceID { get; set; }
    }
    private async Task HandleClick(MouseEventArgs e)
    {
        await Task.Delay(5);
    }




    //Toast
    SfToast ToastObj;
    private string ToastPosition = "Right";
    private string ToastContent = "gg";

    private async Task ShowOnClick()
    {
        await this.ToastObj.ShowAsync();
    }
    private async Task HideOnClick()
    {
        await this.ToastObj.HideAsync("All");
    }
}